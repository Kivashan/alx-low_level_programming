!<arch>
0-isupper.c/    0           0     0     644     195       `
#include "main.h"
/**
 *_isupper - Entry point
 *@c: Integer argument
 *
 *Return: 1 for true, 0 for false
 */

int _isupper(int c)
{
	if (c >= 65 && c <= 90)
		return (1);
	else
		return (0);
}

0-strcat.c/     0           0     0     644     426       `
#include "main.h"

/**
 * _strcat - concatenates two strings
 * @dest: destination string
 * @src: source string to be added to destination string
 *
 * Return: a pointer to a string
 */

char *_strcat(char *dest, char *src)
{
	int dcount = 0;
	int scount = 0;

	while (dest[dcount] != '\0')
		dcount++;

	for (; src[scount] != '\0'; scount++, dcount++)
		dest[dcount] = src[scount];

	dest[dcount] = '\0';

	return (dest);
}
1-isdigit.c/    0           0     0     644     193       `
#include "main.h"
/**
 *_isdigit - Entry point
 *@c: Integer argument
 *
 *Return: 1 is true, 0 is false
 */

int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
		return (1);
	else
		return (0);
}

1-strncat.c/    0           0     0     644     518       `
#include "main.h"

/**
 * _strncat - concatenates two strings
 * @dest: destination string
 * @src: source string to be appended to the destination string
 * @n: the number of elements from source string to be copied
 *
 * Return: a pointer to a string
 */

char *_strncat(char *dest, char *src, int n)
{
	int dcount = 0;
	int scount = 0;

	while (dest[dcount] != '\0')
		dcount++;

	for (; src[scount] != '\0' && scount < n; scount++, dcount++)
		dest[dcount] = src[scount];

	dest[dcount] = '\0';

	return (dest);
}
2-strlen.c/     0           0     0     644     234       `
#include "main.h"

/**
 * _strlen - Entry point
 * @s: takes a pointer to a string as an argument
 *
 * Return: The string length as an int
 */

int _strlen(char *s)
{
	int len = 0;

	while (s[len] != '\0')
		len++;

	return (len);
}
3-islower.c/    0           0     0     644     195       `
#include "main.h"
/**
 *_islower -  Entry point
 *@c: Integer argument
 *
 *Return: 1 is true, 2 is false
 */

int _islower(int c)
{
	if (c >= 97 && c <= 122)
		return (1);
	else
		return (0);
}

3-strcmp.c/     0           0     0     644     384       `
#include "main.h"

/**
 * _strcmp - compares s1 or the first n bytes of s1 to s2
 * @s1: string to be compared
 * @s2: string to be compared against
 *
 * Return: returns an integer
 */

int _strcmp(char *s1, char *s2)
{
	int i = 0, j = 0;

	for (; s1[i] != '\0' || s2[i] != '\0'; i++)
	{
		if (s1[i] != s2[i])
		{
			j = (int)(s1[i]) - (int)(s2[i]);
				break;
		}
	}
	return (j);
}
4-isalpha.c/    0           0     0     644     220       `
#include "main.h"
/**
 *_isalpha - Entry point
 *@c: Integer argument
 *
 *Return: 1 is true, 0 is false
 */

int _isalpha(int c)
{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
		return (1);
	else
		return (0);
}
5-strstr.c/     0           0     0     644     527       `
#include "main.h"

/**
 * _strstr - function that locates a substring.
 * @haystack: source string
 * @needle: string to locate within source
 *
 * Return: Returns a pointer to the beginning of located substring, or NULL
 */

char *_strstr(char *haystack, char *needle)
{
	char *test2 = haystack;

	while (*haystack)
	{
		char *test = needle;

		test2 = haystack;
		while (*haystack && *test && *haystack == *test)
		{
			haystack++;
			test++;
		}
		if (!*test)
			return (test2);
		haystack = test2 + 1;
	}
	return (NULL);
}

9-strcpy.c/     0           0     0     644     374       `
#include "main.h"

/**
 * _strcpy - Entry point
 * @dest: pointer to a string, src is copied to dest
 * @src: pointer to a string, src is copied to dest
 *
 * Return: dest - pointer to a string
 */

char *_strcpy(char *dest, char *src)
{
	int count = 0;

	while (src[count] != '\0')
	{
		dest[count] = src[count];
		count++;
	}
	dest[count] = src[count];

	return (dest);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

0-memset.c/     0           0     0     644     340       `
#include "main.h"

/**
 * _memset - function fills the first n bytes of s with the constant byte b
 * @s: character string
 * @b: byte to fill in
 * @n: number of bytes to fill
 *
 * Return: A pointer to a string
 */

char *_memset(char *s, char b, unsigned int n)
{
	int i = (int)n - 1;

	for (; i >= 0; i--)
		s[i] = b;

	return (s);
}


100-atoi.c/     0           0     0     644     523       `
#include "main.h"

/**
 * _atoi - Entry point
 * @s: pointer to a string
 *
 * Return: 0 no number found,else return integer found in string
 */

int _atoi(char *s)
{
	unsigned int tmp = 1, i = 0, num = 0, a = 0;

	while (s[i] < 48 || s[i] > 57)
	{
		if (s[i] == '+')
			tmp *= 1;
		if (s[i] == '-')
			tmp *= -1;
		i++;
	}

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] >= 48 && s[i] <= 57)
		{
			num = (num * 10) + s[i] - '0';
			a = 1;
		}
		if (a == 1 && (s[i] < 48 || s[i] > 57))
			break;
	}
	return (num *= tmp);
}

1-memcpy.c/     0           0     0     644     365       `
#include "main.h"

/**
 * _memcpy - copies n bytes from src to dest
 * @dest: destination string
 * @src: source string
 * @n: number of bytes to copy
 *
 * Return: a pointer to a string
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	int i = (int)n - 1; /*n-i because array begins at 0 */

	for (; i >= 0; --i)
		dest[i] = src[i];

	return (dest);
}


2-strchr.c/     0           0     0     644     304       `
#include "main.h"

/**
 * _strchr - returns first occurrence of c if found, else NULL
 * @s: source string
 * @c: character to search for
 *
 * Return: returns 1st occurence of c if found else NULL
 */

char *_strchr(char *s, char c)
{
	while (*s)
	{
		if (*++s == c)
			return (s);
	}
	return (NULL);
}
2-strncpy.c/    0           0     0     644     398       `
#include "main.h"

/**
 * _strncpy - copies a string
 * @dest: buffer for copy to be placed in
 * @src: string to copy
 * @n: the number of elements from src to be copied into buffer
 *
 * Return: pointer to a string
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i = 0;

	for (; src[i] != '\0' && i < n; i++)
		dest[i] = src[i];

	for (; i < n; i++)
		dest[i] = '\0';

	return (dest);
}
3-puts.c/       0           0     0     644     235       `
#include "main.h"

/**
 * _puts - Entry point
 * @str: takes a pointer to a string as an argument
 *
 * Return: Void
 */

void _puts(char *str)
{
	int i = 0;

	while (str[i] != '\0')
	{
		_putchar(str[i]);
		i++;
	}
	_putchar('\n');
}

3-strspn.c/     0           0     0     644     488       `
#include <stdio.h>

/**
 * _strspn - gets the length of a prefix substring
 * @s: source string
 * @accept: sub string
 *
 * Return: number of bytes from start of s, matching accept
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int count = 0;
	int n;
	int i;

	while (s[count] != '\0')
	{
		n = 0;
		i = 0;
		while (accept[i] != '\0')
		{
			if (accept[i] == s[count])
			{
				count++;
				n = 1;
				break;
			}
			i++;
		}
		if (n == 0)
			break;
	}

	return (count);
}
4-strpbrk.c/    0           0     0     644     402       `
#include "main.h"

/**
 * _strpbrk - searches a string for any of a set of bytes.
 * @s: source string
 * @accept: string to test against source
 *
 * Return: returns pointer to s where accept if first found, else null
 */

char *_strpbrk(char *s, char *accept)
{
	while (*s)
	{
		char *test = accept;

		while (*test)
		{
			if (*test == *s)
				return (s);
			test++;
		}
		s++;
	}
	return (NULL);
}
6-abs.c/        0           0     0     644     189       `
#include "main.h"
/**
 *_abs - Entry point
 *@n: Integer argument
 *
 *Return: always return n as a positive number
 */

int _abs(int n)
{
	if (n >= 0)
		return (n);
	else
		return (-n);
}

